{"version":3,"sources":["App.js","index.js"],"names":["Calc","useState","ipString","setIpString","mask","setMask","maskResult","setMaskResult","hosts","setHosts","broadcast","setBroadcast","address","setAddress","showResult","setShowResult","isCanCalc","length","split","every","e","mode","top","type","placeholder","value","onChange","target","readOnly","disabled","size","onClick","magicNumber","octMagicNumber","maskBitLength","ip","Math","pow","notFullOct","fullOct","i","join","calcMaskResult","addressOct","broadcastOct","octMagicIP","calcAddresses","App","viewWidth","useAdaptivity","header","separator","spaced","ViewWidth","MOBILE","activePanel","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4429597.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {Button, FormItem, FormLayout, FormLayoutGroup, Input} from \"@vkontakte/vkui\";\n\nconst Calc = () => {\n    const [ipString, setIpString] = useState('');\n    const [mask, setMask] = useState('');\n    const [maskResult, setMaskResult] = useState('');\n    const [hosts, setHosts] = useState(0);\n    const [broadcast, setBroadcast] = useState('');\n    const [address, setAddress] = useState('');\n\n    const [showResult, setShowResult] = useState(false)\n\n    const isCanCalc = !(ipString.length !== 0 && mask && mask >= 0 && mask <=\n        32 && ipString.split('.').every(e => e <= 255 && e >= 0))\n\n    const calcAddresses = (mask, ipString) => {\n        const maskBitLength = [0, 128, 192, 224, 240, 248, 252, 254, 255]\n        let maskResult = [];\n        let ip = ipString.split('.');\n        //Расчёт количества адресов\n        setHosts(Math.pow(2, 32 - mask));\n        //Расчёт маски\n        const calcMaskResult = () => {\n            let notFullOct = mask % 8;\n            let fullOct = (mask - notFullOct) / 8;\n            for (let i = 0; i < 4; i++) {\n                if (fullOct !== 0) {\n                    maskResult[i] = 255;\n                    fullOct -= 1;\n                } else {\n                    maskResult[i] = maskBitLength[notFullOct];\n                    notFullOct = 0;\n                }\n            }\n            setMaskResult(maskResult.join('.'));\n        };\n        calcMaskResult();\n        //Адрес сети и широковещательный адрес\n        let magicNumber;\n        let octMagicNumber;\n        for (let i = 0; i < maskResult.length; i++) {\n            if (maskResult[i] !== 255 && maskResult[i] !== 0) {\n                magicNumber = 256 - maskResult[i];\n                octMagicNumber = i;\n            } else if (!magicNumber) {\n                magicNumber = 0;\n                octMagicNumber = -1;\n            }\n        }\n        if (magicNumber !== 0 && octMagicNumber !== -1) {\n            const octMagicIP = ip[octMagicNumber];\n            let addressOct;\n            let broadcastOct;\n            for (let i = 0; i <= 255; i += magicNumber) {\n                if (octMagicIP >= i\n                    && octMagicIP < (i + magicNumber)\n                    && (i + magicNumber < 256)\n                ) {\n                    addressOct = i;\n                    broadcastOct = i;\n                }\n            }\n            //Нахождение адреса сети\n            let address = [];\n            for (let i = 0; i < ip.length; i++) {\n                if (maskResult[i] === 255) {\n                    address[i] = ip[i];\n                } else {\n                    address[i] = addressOct;\n                    addressOct = 0;\n                }\n            }\n            setAddress(address.join('.'));\n            //Нахождение широковещательного адреса\n            let broadcast = [];\n            for (let i = 0; i < ip.length; i++) {\n                if (maskResult[i] === 255) {\n                    broadcast[i] = ip[i];\n                } else {\n                    if (broadcastOct + magicNumber < 256) {\n                        broadcast[i] = broadcastOct + magicNumber - 1;\n                        broadcastOct = 255;\n                    } else {\n                        broadcast[i] = 255;\n                    }\n                }\n            }\n            setBroadcast(broadcast.join('.'))\n        } else {\n            //Адрес сети\n            let address = [];\n            for (let i = 0; i < ip.length; i++) {\n                if (maskResult[i] === 255) {\n                    address[i] = ip[i];\n                } else {\n                    address[i] = 0;\n                }\n            }\n            setAddress(address.join('.'));\n            //Широковещательный адрес\n            let broadcast = [];\n            for (let i = 0; i < ip.length; i++) {\n                if (maskResult[i] === 255) {\n                    broadcast[i] = ip[i];\n                } else {\n                    broadcast[i] = 255;\n                }\n            }\n            setBroadcast(broadcast.join('.'))\n        }\n        setShowResult(true)\n    };\n    const clearInputs = () => {\n        setIpString('');\n        setMask('');\n        setMaskResult('');\n        setHosts(0);\n        setBroadcast('');\n        setAddress('');\n        setShowResult(false)\n    }\n\n    return (\n        <>\n            <FormLayout>\n                <FormLayoutGroup mode={'horizontal'}>\n                    <FormItem top={'IP-адрес'}>\n                        <Input\n                            type=\"text\"\n                            placeholder={'192.212.23.76'}\n                            value={ipString}\n                            onChange={(e) => setIpString(e.target.value)}\n                        />\n                    </FormItem>\n                    <FormItem top={'Маска'}>\n                        <Input\n                            type=\"text\"\n                            placeholder={'25'}\n                            value={mask}\n                            onChange={(e) => setMask(e.target.value)}\n                        />\n                    </FormItem>\n                </FormLayoutGroup>\n                {\n                    showResult ? <>\n                        <FormLayoutGroup mode={'horizontal'}>\n                            <FormItem top={'Маска'}>\n                                <Input\n                                    type=\"text\"\n                                    placeholder={'255.255.255.255'}\n                                    value={maskResult}\n                                    readOnly\n                                />\n                            </FormItem>\n                            <FormItem top={'Колличество адресов'}>\n                                <Input\n                                    type=\"text\"\n                                    placeholder={'928'}\n                                    value={hosts}\n                                    readOnly\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                        <FormLayoutGroup mode={'horizontal'}>\n                            <FormItem top={'Адрес сети'}>\n                                <Input\n                                    type=\"text\"\n                                    placeholder={'255.255.255.255'}\n                                    value={address}\n                                    readOnly\n                                />\n                            </FormItem>\n                            <FormItem top={'Широковещательный адрес'}>\n                                <Input\n                                    type=\"text\"\n                                    placeholder={'255.255.255.255'}\n                                    value={broadcast}\n                                    readOnly\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                    </> : null\n                }\n                <FormItem>\n                    <Button\n                        disabled={isCanCalc}\n                        size={'l'}\n                        onClick={() => {\n                            if (showResult) {\n                                clearInputs()\n                            } else {\n                                calcAddresses(mask, ipString);\n                            }\n                        }}\n                    >\n                        {showResult ? \"Очистить\" : \"Рассчитать\"}\n                    </Button>\n                </FormItem>\n            </FormLayout>\n        </>\n    );\n}\n\nexport default Calc;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n    AdaptivityProvider,\n    ConfigProvider,\n    useAdaptivity,\n    AppRoot,\n    SplitLayout,\n    SplitCol,\n    ViewWidth,\n    View,\n    Panel,\n    PanelHeader,\n    Group,\n} from \"@vkontakte/vkui\";\nimport \"@vkontakte/vkui/dist/vkui.css\";\nimport Calc from \"./App\";\n\nconst App = () => {\n    const { viewWidth } = useAdaptivity();\n\n    return (\n        <AppRoot>\n            <SplitLayout header={<PanelHeader separator={false} />}>\n                <SplitCol spaced={viewWidth && viewWidth > ViewWidth.MOBILE}>\n                    <View activePanel=\"main\">\n                        <Panel id=\"main\">\n                            <PanelHeader>IP Калькулятор ЭПИ-21</PanelHeader>\n                            <Group>\n                                <Calc/>\n                            </Group>\n                        </Panel>\n                    </View>\n                </SplitCol>\n            </SplitLayout>\n        </AppRoot>\n    );\n};\n\nReactDOM.render(\n    <ConfigProvider>\n        <AdaptivityProvider>\n            <App />\n        </AdaptivityProvider>\n    </ConfigProvider>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}